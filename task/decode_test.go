package task

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/mapprotocol/fe-backend/utils"
	"math/big"
	"reflect"
	"testing"
)

func TestUnpackDeliverAndSwap(t *testing.T) {
	type args struct {
		data []byte
	}
	tests := []struct {
		name    string
		args    args
		want    *DeliverAndSwapEventParams
		wantErr bool
	}{
		{
			name: "test-1",
			args: args{
				data: common.Hex2Bytes("0x460000174876e802000000000000000000000000000000000000000000000000214a9568fd625718bff77cbdc51f05acb117c018e6d744c5ee2d69e5c0b62d94000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000000000000000000000000000000000000009ff5b"),
			},
			want: &DeliverAndSwapEventParams{
				OrderId:  utils.Uint64ToByte32(5044031682654955522),
				BridgeId: [32]byte{0x21, 0x4a, 0x95, 0x68, 0xfd, 0x62, 0x57, 0x18, 0xbf, 0xf7, 0x7c, 0xbd, 0xc5, 0x1f, 0x5, 0xac, 0xb1, 0x17, 0xc0, 0x18, 0xe6, 0xd7, 0x44, 0xc5, 0xee, 0x2d, 0x69, 0xe5, 0xc0, 0xb6, 0x2d, 0x94},
				Token:    common.HexToAddress("xc2132D05D31c914a87C6611C10748AEb04B58e8F"),
				Amount:   big.NewInt(655195),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := UnpackDeliverAndSwap(tt.args.data)
			if (err != nil) != tt.wantErr {
				t.Errorf("UnpackDeliverAndSwap() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("UnpackDeliverAndSwap() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestDecodeData(t *testing.T) {
	type args struct {
		data string
	}
	tests := []struct {
		name    string
		args    args
		want    *SwapAndBridgeFunctionParams
		wantErr bool
	}{
		{
			name: "test-1",
			args: args{
				data: "0x6e1537da00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eb16a9cfdf8e3a4471ef190ee63de5a24f38787000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ad78ebc5ac6200000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c2000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000033daba9618a75a7aff103e53afe530fbacf4a3dd0000000000000000000000000eb16a9cfdf8e3a4471ef190ee63de5a24f387870000000000000000000000000eb16a9cfdf8e3a4471ef190ee63de5a24f387870000000000000000000000000000000000000000000000001d3cb88af612518e00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000aa301070448385cfaac5913a67b16c4392944a8f000000000000000000000000aa301070448385cfaac5913a67b16c4392944a8f00000000000000000000000000000000000000000000000ad78ebc5ac620000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000284efa064650000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033daba9618a75a7aff103e53afe530fbacf4a3dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eb16a9cfdf8e3a4471ef190ee63de5a24f387870000000000000000000000000000000000000000000000001d3cb88af612518e00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000bce9e0ebd4fd4d6562495af45c4aaa0c1f7f3d70000000000000000000000000bce9e0ebd4fd4d6562495af45c4aaa0c1f7f3d700000000000000000000000000000000000000000000000ad78ebc5ac620000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000013cb04d4a5dfb6398fc5ab005a6c84337256ee2300000000000000000000000033daba9618a75a7aff103e53afe530fbacf4a3dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000014ee030ec6f4307411607e55acd08e628ae6655b8600000000000000000000000000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000aaab45a0ea5d8615411877178de9fa7a54068dde000000000000000000000000aaab45a0ea5d8615411877178de9fa7a54068dde000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eb16a9cfdf8e3a4471ef190ee63de5a24f3878700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003448e2aba5200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000058f8000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000000000000000000000000000004d50200000001000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000258000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078304562313641396346446638653341343437314546313930654536336465354132346633383738370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033230300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000305551416971502d7179364f334662653861474e544d7a5f6175625a444d4271547145304e7766377166796a316e423963000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			},
			want:    &SwapAndBridgeFunctionParams{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := DecodeData(tt.args.data)
			if (err != nil) != tt.wantErr {
				t.Errorf("DecodeData() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			t.Logf("got: %+v\n", got)
			t.Logf("SwapData: %s\n", common.Bytes2Hex(got.SwapData))
			t.Logf("BridgeData: %s\n", common.Bytes2Hex(got.BridgeData))
			t.Logf("PermitData: %s\n", common.Bytes2Hex(got.PermitData))
			t.Logf("FeeData: %s\n", common.Bytes2Hex(got.FeeData))
		})
	}
}
