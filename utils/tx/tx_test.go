package tx

import (
	"fmt"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/core/types"
	"math/big"
	"os"
	"reflect"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/mapprotocol/fe-backend/resource/log"
)

var testPrivateKey string

func TestMain(m *testing.M) {
	testPrivateKey = os.Getenv("PRIVATE_KEY")
	if testPrivateKey == "" {
		panic("PRIVATE_KEY environment variable not set")
	}
	log.Init("dev", "/tmp")
	m.Run()
}

func TestTransactor_SendTransaction(t *testing.T) {
	type fields struct {
		endpoint           string
		privateKey         string
		gasLimitMultiplier float64
	}
	type args struct {
		to    common.Address
		value string
		input []byte
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    common.Hash
		wantErr bool
	}{
		{
			name: "t-1",
			fields: fields{
				endpoint:           "https://rpc.maplabs.io",
				privateKey:         testPrivateKey,
				gasLimitMultiplier: 1.5,
			},
			args: args{
				to:    common.HexToAddress("0xbB21e441fb738F54e6eC244e435475096E179d66"),
				value: "0x056bc75e2d63100000",
				input: common.Hex2Bytes("480a341100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b60000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002162b2aee2dd657fb131b28cc34dee6797b66f000000000000000000000000002162b2aee2dd657fb131b28cc34dee6797b66f000000000000000000000000f855a761f9182c4b22a04753681a1f6324ed344900000000000000000000000033daba9618a75a7aff103e53afe530fbacf4a3dd0000000000000000000000000000000000000000000000000e5e47b296720f1c00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000404efa064650000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033daba9618a75a7aff103e53afe530fbacf4a3dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f855a761f9182c4b22a04753681a1f6324ed34490000000000000000000000000000000000000000000000000e5e47b296720f1c00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000bce9e0ebd4fd4d6562495af45c4aaa0c1f7f3d70000000000000000000000000bce9e0ebd4fd4d6562495af45c4aaa0c1f7f3d700000000000000000000000000000000000000000000000340aad21b3b70000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000089f81e99644d8c60000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000013cb04d4a5dfb6398fc5ab005a6c84337256ee2300000000000000000000000033daba9618a75a7aff103e53afe530fbacf4a3dd00000000000000000000000000000000000000000000000000000000000000020000000000000000000000006628a22d9e16e42225a46ceadd93dacfefacfe1b0000000000000000000000006628a22d9e16e42225a46ceadd93dacfefacfe1b0000000000000000000000000000000000000000000000022b1c8c1227a0000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000005bec5c9002d36560000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b13cb04d4a5dfb6398fc5ab005a6c84337256ee230009c433daba9618a75a7aff103e53afe530fbacf4a3dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000089000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000014bb21e441fb738f54e6ec244e435475096e179d6600000000000000000000000000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002162b2aee2dd657fb131b28cc34dee6797b66f000000000000000000000000002162b2aee2dd657fb131b28cc34dee6797b66f000000000000000000000000f855a761f9182c4b22a04753681a1f6324ed34490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017be66a2c0ed2b500000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002a4efa064650000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f855a761f9182c4b22a04753681a1f6324ed3449000000000000000000000000000000000000000000000000017be66a2c0ed2b500000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc4500000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000000000000000000000000000000000000001072400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000017be66a2c0ed2b500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000042c2132d05d31c914a87c6611c10748aeb04b58e8f0000642791bca1f2de4661ed88a30c99a7a9449aa841740001f40d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
			},
			want:    common.Hash{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t1 *testing.T) {
			client, err := ethclient.Dial(tt.fields.endpoint)
			if err != nil {
				t.Fatalf("Failed to connect to endpoint %s", tt.fields.endpoint)
			}

			privateKey, err := crypto.ToECDSA(common.FromHex(tt.fields.privateKey))
			if err != nil {
				t.Fatal(err)
			}

			tx := &Transactor{
				endpoint:           tt.fields.endpoint,
				client:             client,
				address:            crypto.PubkeyToAddress(privateKey.PublicKey),
				privateKey:         privateKey,
				gasLimitMultiplier: tt.fields.gasLimitMultiplier,
			}
			//
			value, ok := new(big.Int).SetString(tt.args.value, 0)
			if !ok {
				t.Fatal("convert failed")
			}
			fmt.Println("============================== ", tt.args.to, value, tt.args.input)
			got, err := tx.SendTransaction(tt.args.to, value, tt.args.input)
			if (err != nil) != tt.wantErr {
				t1.Errorf("SendTransaction() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			//if !reflect.DeepEqual(got, tt.want) {
			//	t1.Errorf("SendTransaction() got = %v, want %v", got, tt.want)
			//}
			t1.Log("tx hash: ", got)
		})
	}
}

func TestName(t *testing.T) {
	//vv := "0x056bc75e2d63100000"
	//value, ok := new(big.Int).SetString(vv, 0)
	//if !ok {
	//	t.Fatal("convert failed")
	//}
	//fmt.Println("============================== value:", value)

	tx := &types.Transaction{}
	fmt.Println("============================== tx hash: ", tx.Hash())
}

func Test_uint64ToByte32(t *testing.T) {
	type args struct {
		num uint64
	}
	tests := []struct {
		name string
		args args
		want [32]byte
	}{
		{
			name: "t-1",
			args: args{
				num: 12081794727899047,
			},
			want: [32]byte{0, 42, 236, 84, 11, 1, 111, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
		{
			name: "t-2",
			args: args{
				num: math.MaxUint64,
			},
			want: [32]byte{255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := uint64ToByte32(tt.args.num); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("uint64ToByte32() = %v, want %v", got, tt.want)
			}
		})
	}
}
